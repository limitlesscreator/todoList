{"version":3,"sources":["StylesModule/Todolist.module.sass","StylesModule/App.module.sass","serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","className","s","centerFormTitle","TextField","label","variant","value","onChange","e","currentTarget","onKeyPress","key","trim","addItem","helperText","IconButton","onClick","AddSharp","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Todolist","todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","centerForm","addTask","tasks","map","t","Checkbox","checked","active","console","log","changeStatusTask","newValue","changeTaskTitle","removeTasks","filterButtons","Button","changeFilter","filter","App","todolistId1","v1","todolistId2","todolists","setTodolists","tasksObj","setTasksObj","todolistId","filteredTasks","newTask","newTasks","taskId","status","task","find","valueFilter","tl","filteredTodolist","app","AppBar","position","Toolbar","Typography","Container","fixed","layout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bb8cba7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Todolist_error__3m-0I\",\"errorText\":\"Todolist_errorText__3nLkF\",\"selectButton\":\"Todolist_selectButton__1qV5j\",\"todolist\":\"Todolist_todolist__3Uuen\",\"filterButtons\":\"Todolist_filterButtons__36AyD\",\"centerForm\":\"Todolist_centerForm__3t6xL\",\"centerFormTitle\":\"Todolist_centerFormTitle__2sABH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__1V1Os\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./StylesModule/Todolist.module.sass\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddSharp} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (newTaskTitle.trim() === '') {\r\n                setError('error');\r\n                return\r\n            }\r\n            props.addItem(newTaskTitle);\r\n            setNewTaskTitle('')\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('error');\r\n            return\r\n        } else setError('')\r\n\r\n        props.addItem(newTaskTitle);\r\n        setNewTaskTitle('')\r\n    }\r\n    return <div className={s.centerFormTitle}>\r\n        <TextField\r\n            label={'title'}\r\n            error={!!error}\r\n            variant={\"outlined\"}\r\n            value={newTaskTitle}\r\n            onChange={onNewTitleChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            helperText={error}/>\r\n        <IconButton onClick={addTask} >\r\n            <AddSharp/>\r\n        </IconButton>\r\n    </div>\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode,setEditMode] = useState(false)\r\n    let [title,setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler} onKeyPress={onKeyPressHandler}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport s from './StylesModule/Todolist.module.sass'\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    active: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    changeFilter: (valueFilter: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeStatusTask: (taskId: string, status: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const onAllClickHandler = () => props.changeFilter('all', props.id)\r\n    const onActiveClickHandler = () => props.changeFilter('active', props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <div className={s.centerForm}><AddItemForm addItem={addTask}/></div>\r\n            <ul>\r\n                {props.tasks.map(t => {\r\n                    const onRemoveHandler = () => {\r\n                        props.removeTasks(t.id, props.id)\r\n                    }\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        console.log('want to change' + t.id + e.currentTarget.checked)\r\n                        props.changeStatusTask(t.id, e.currentTarget.checked, props.id)\r\n                    }\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id)\r\n                    }\r\n                    return <li key={t.id}><Checkbox checked={t.active} onChange={onChangeStatusHandler}/>\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        <IconButton onClick={onRemoveHandler} >\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </li>\r\n                })\r\n                }\r\n            </ul>\r\n            <div className={s.filterButtons}>\r\n                <Button onClick={onAllClickHandler}\r\n                        variant={props.filter === 'all' ? \"contained\" : 'outlined'}>All\r\n                </Button>\r\n                <Button onClick={onActiveClickHandler}\r\n                        variant={props.filter === 'active' ? \"contained\" : 'outlined'}>Active\r\n                </Button>\r\n                <Button onClick={onCompletedClickHandler}\r\n                        variant={props.filter === 'completed' ? \"contained\" : 'outlined'}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './StylesModule/App.module.sass';\r\nimport {v1} from \"uuid\";\r\nimport {TasksType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport function App() {\r\n    let todolistId1 = v1()\r\n    let todolistId2 = v1()\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: '#1', filter: 'all'},\r\n        {id: todolistId2, title: '#2', filter: 'all'},\r\n    ])\r\n    let [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'react', active: true},\r\n            {id: v1(), title: 'css', active: true},\r\n            {id: v1(), title: 'redux', active: false},],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'book', active: true},\r\n            {id: v1(), title: 'SQL', active: false},\r\n            {id: v1(), title: 'Ruby', active: false},]\r\n    })\r\n\r\n    const removeTasks = (id: string, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId]\r\n        let filteredTasks = tasks.filter(t => t.id !== id)\r\n        tasksObj[todolistId] = filteredTasks\r\n        setTasksObj({...tasksObj})\r\n    }\r\n    const addTask = (title: string, todolistId: string) => {\r\n        let newTask = {id: v1(), title: title, active: false}\r\n        let tasks = tasksObj[todolistId]\r\n        let newTasks = [newTask, ...tasks]\r\n        tasksObj[todolistId] = newTasks\r\n        setTasksObj({...tasksObj})\r\n    }\r\n    const changeStatusTask = (taskId: string, status: boolean, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.active = status\r\n            setTasksObj({...tasksObj})\r\n        }\r\n    }\r\n    const changeTaskTitle = (taskId: string, newTitle: string, todolistId: string) => {\r\n        let tasks = tasksObj[todolistId]\r\n        let task = tasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasksObj({...tasksObj})\r\n        }\r\n    }\r\n    const changeFilter = (valueFilter: FilterValuesType, todolistId: string) => {\r\n        let todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = valueFilter\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    let removeTodolist = (todolistId: string) => {\r\n        let filteredTodolist = todolists.filter(tl => tl.id !== todolistId)\r\n        setTodolists(filteredTodolist)\r\n\r\n        delete tasksObj[todolistId]\r\n        setTasksObj({...tasksObj})\r\n    }\r\n    let changeTodolistTitle = (todolistId: string, newTitle: string) => {\r\n        const todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.title = newTitle\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            filter: 'all',\r\n            title: title\r\n        }\r\n        setTodolists([todolist, ...todolists])\r\n        setTasksObj({\r\n            ...tasksObj,\r\n            [todolist.id]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">*/}\r\n                    {/*    <Menu/>*/}\r\n                    {/*</IconButton>*/}\r\n                    <Typography variant=\"h6\">\r\n                        Todolist App\r\n                    </Typography>\r\n                    {/*<Button color=\"inherit\">Login</Button>*/}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {/*Container bellow is layout of material ui*/}\r\n            <Container fixed>\r\n                <AddItemForm addItem={addTodolist}/>\r\n                <div className={s.layout}>\r\n                    {todolists.map(tl => {\r\n                        let filteredTasks = tasksObj[tl.id]\r\n\r\n                        if (tl.filter === 'completed') {\r\n\r\n                            filteredTasks = filteredTasks.filter(t => t.active === true)\r\n                        }\r\n                        if (tl.filter === 'active') {\r\n                            filteredTasks = filteredTasks.filter(t => t.active === false)\r\n                        }\r\n                        return (\r\n\r\n                            <Todolist\r\n                                key={tl.id}\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={filteredTasks}\r\n                                removeTasks={removeTasks}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatusTask={changeStatusTask}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}